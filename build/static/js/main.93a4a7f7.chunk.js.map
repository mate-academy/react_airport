{"version":3,"sources":["Components/FlightItem.js","Components/Button.js","Components/FlightList.js","App.js","serviceWorker.js","index.js"],"names":["FlightItem","localDate","Date","this","props","item","actual","localeTime","getHours","getMinutes","toString","padStart","timeArrSheduleDate","timeArrShedule","timeDepShedule","react_default","a","createElement","className","term","displayGate","gateNo","airline","en","name","status","fltNo","href","Component","Button","type","display","onClick","updateDisplayMode","width","height","viewBox","version","xmlns","id","transform","fill","d","FlightList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","departure","arrival","departureEvent","bind","assertThisInitialized","_this2","fetch","concat","toISOString","split","then","data","json","_ref","body","setState","stateItem","map","FlightItem_FlightItem","key","ID","App","src_Components_FlightList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93a4a7f7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './FlightList.css'\n\nexport default class FlightItem extends Component {\n\n  render() {\n    // console.log(this.props.item);\n    const localDate = new Date(this.props.item.actual);\n    const localeTime = localDate.getHours() + ':' + localDate.getMinutes().toString().padStart(2, '0');\n    const timeArrSheduleDate = new Date(this.props.item.timeArrShedule || this.props.item.timeDepShedule);\n    const timeArrShedule = timeArrSheduleDate.getHours() + ':' + localDate.getMinutes().toString().padStart(2, '0');\n\n\n    return (\n      <tr className='flightList'>\n        <td>\n          <span className={this.props.item.term === 'A' ? 'term-a' : 'term-d'}>\n            {this.props.item.term}\n          </span>\n        </td>\n        {this.props.displayGate ? <td>{this.props.item.gateNo}</td> : null}\n        <td>{localeTime}</td>\n        <td>{this.props.item['airportFromID.city_en'] || this.props.item['airportToID.city_en']}</td>\n        {timeArrSheduleDate ? <td>{timeArrShedule}</td> : 'Canceled'}\n        <td>{this.props.item.airline.en.name}</td>\n        <td>{this.props.item.status + this.props.item.fltNo}</td>\n        <td><a href='https://github.com/OlhaMazurenko/js_ordering-food'>Flight details</a></td>\n      </tr>\n    )\n  }\n} \n","import React from 'react';\n\nexport default function Button (props) {\n  return (\n    <nav>\n      <button type='button' className={props.display === 'departure' ? 'departures active' : 'departures'}\n        onClick={() => props.updateDisplayMode('departure')}>\n        <svg width=\"40px\" height=\"28px\" viewBox=\"0 0 40 28\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g  id=\"Path-403\" transform=\"translate(-1.000000, -1.000000)\" fill=\"#fff\">\n            <path d=\"M40.9190312,14.2925525 C40.731055,13.5210761 40.2396434,12.8581323 39.5561585,12.4539552\n              C38.8726735,12.0497781 38.0549837,11.9385881 37.2883912,12.1455827 L26.8096581,15.0218819 L13.1945082,2\n              L9.38678826,3.03046545 L17.5564785,17.5510243 L7.75204986,20.2442408 L3.86129243,17.1278331 L1,17.9171897\n              L4.59162231,24.3200818 L6.11030829,27.0112974 L9.26373268,26.1409043 L19.7414654,23.2656055\n              L28.3253427,20.9165445 L38.8070772,18.0372439 C40.4055057,17.5625364 41.3397513,15.9060318\n              40.9190312,14.2925525 Z\"  transform=\"translate(21.009879, 14.505649) rotate(-4.012171)\n              translate(-21.009879, -14.505649) \">\n            </path>\n          </g>\n        </svg>\n        DEPARTURES\n      </button>\n      <button  type='button' className={props.display === 'arrival' ? 'arrivals active' : 'arrivals'}\n        onClick={() => props.updateDisplayMode('arrival')}>\n        <svg width=\"40px\" height=\"28px\" viewBox=\"0 0 40 28\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g  fill=\"#fff\">\n            <g id=\"Group\" transform=\"translate(-4.000000, -7.000000)\">\n              <path d=\"M43.8940167,20.2848496 C43.7061583,19.5138567 43.2150547,18.8513283 42.531998,18.4474045\n                C41.8489414,18.0434806 41.031764,17.9323603 40.2656518,18.1392252 L29.793485,21.013722 L16.1868667,8\n                L12.3815328,9.02981973 L20.5461037,23.5412796 L10.7478188,26.2328084 L6.85949946,23.1183536 L4,23.9072155\n                L7.5893717,30.3060954 L9.10710602,32.9956246 L12.2585544,32.1257769 L22.7297214,29.2522799 L31.3082198,26.9046908\n                L41.7833862,24.0271945 C43.3808131,23.5527844 44.3144732,21.8973179 43.8940167,20.2848496 Z\"\n                transform=\"translate(23.997341, 20.497812) rotate(27.974730)\n                translate(-23.997341, -20.497812) \">\n              </path>\n            </g>\n          </g>\n        </svg>\n         ARRIVALS\n      </button>\n    </nav>\n  );\n}\n","import React, { Component } from 'react';\nimport FlightItem from './FlightItem';\nimport Button from './Button';\nimport './FlightList.css';\n\nclass FlightList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      departure: [],\n      arrival: [],\n      display: 'departure',\n      departureEvent: true\n    };\n    this.updateDisplayMode = this.updateDisplayMode.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(`https://api.iev.aero/api/flights/${`${new Date()\n      .toISOString()}`.split('T')[0]}`)\n      .then(data => data.json())\n      .then(({ body }) => {\n        const { arrival, departure } = body;\n        this.setState(() => ({\n          arrival, departure,\n        }));\n      });\n  }\n\n  updateDisplayMode(stateItem) {\n    this.setState({ display: stateItem });\n  }\n\n  render() {\n    let data = this.state[this.state.display];\n    const displayGate = this.state.display === 'departure';\n    return (\n      <div>\n        <Button updateDisplayMode={this.updateDisplayMode} display={this.state.display}  />\n        <table>\n          <thead>\n            <tr>\n              <th>Terminal</th>\n              {this.state.display === 'departure' ? <th>Gate</th> : null}\n              <th>Local Time</th>\n              <th>Destination</th>\n              <th>Status</th>\n              <th>Airline</th>\n              <th>Flight </th>\n              {/* <th></th> */}\n            </tr>\n          </thead>\n          <tbody>\n            {data.map(item => <FlightItem item={item} key={item.ID}\n              displayGate={displayGate} />)}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default FlightList; \n","import React from 'react';\nimport './App.css';\nimport FlightList from './Components/FlightList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FlightList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}