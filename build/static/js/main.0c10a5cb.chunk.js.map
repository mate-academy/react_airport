{"version":3,"sources":["components/status/Status.js","components/Flight/Flight.js","components/FlightList/FlightList.js","components/svgComponents/IconSVG.js","App.js","serviceWorker.js","index.js"],"names":["Status","props","status","timefact","Date","flight","timeTakeofFact","toLocaleTimeString","slice","concat","react_default","a","createElement","FlightDeparture","time","actual","minutes","getMinutes","localTime","getHours","className","term","codeShareData","map","item","key","airline","en","name","codeShare","FlightList","flightItems","ID","IconSVG","class","version","id","xmlns","xmlnsXlink","x","y","viewBox","style","enableBackground","xmlSpace","fill","background","stroke","strokeWidth","strokeMiterlimit","d","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","departure","arrival","date","displayTable","selectedDay","loaded","changedDisplayTable","bind","assertThisInitialized","number","day","currentDate","currentYear","getFullYear","currentMonth","getMonth","currentDay","getDate","setState","objectSpread","e","display","target","outerText","nodeName","url","_this2","fetch","then","data","json","body","_ref","filter","filterFlight","timeArrExpectCalc","timeDepExpectCalc","currDate","flightDate","split","getCurrentDate","prevProps","prevState","loadApi","num","arguments","length","undefined","month","_this3","onClick","getDayAndMonth","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c10a5cb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Status(props) {\r\n  let status;\r\n  let timefact = new Date(props.flight.timeTakeofFact).toLocaleTimeString().slice(0, -6)\r\n\r\n  switch (props.flight.status) {\r\n    case 'DP':\r\n      status = `Departed at ${timefact}`;\r\n      break;\r\n    case 'CX':\r\n      status = 'Cancelled';\r\n      break;\r\n    case 'BD':\r\n      status = 'In boarding';\r\n      break;\r\n    case 'DL':\r\n      status = 'Delayed';\r\n      break;\r\n    case 'CK':\r\n      status = 'Check in';\r\n      break;\r\n    case 'LN':\r\n      status = `Landed ${timefact}`;\r\n      break;\r\n    default: status = 'On time';\r\n  };\r\n\r\n  return (\r\n    <td>{status}</td>\r\n  );\r\n};\r\n","import React from 'react'\r\nimport Status from '../status/Status';\r\n\r\nexport default function FlightDeparture(props) {\r\n  const time = new Date(props.flight.actual);\r\n  const minutes = time.getMinutes();\r\n  const localTime = `${time.getHours()}:${minutes >= 10 ? minutes : '0' + minutes}`;\r\n  return (\r\n    <tr>\r\n      <td className=\"terminal\">\r\n        <span className={'terminal' + props.flight.term}>{props.flight.term}</span>\r\n      </td>\r\n      <td>{localTime}</td>\r\n      <td>{props.flight['airportToID.city_en'] || props.flight['airportFromID.city_en']}</td>\r\n      <Status flight={props.flight}/>\r\n      <td className=\"airline\">\r\n        {props.flight.codeShareData.map(item => {\r\n          return <span key={item.airline.en.name}>{item.airline.en.name}</span>\r\n        })}\r\n      </td>\r\n      <td className=\"codeShare\">\r\n        {props.flight.codeShareData.map(item => {\r\n          return <span key={item.codeShare}>{item.codeShare}</span>\r\n        })}\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport Flight from '../Flight/Flight';\r\nimport './flightList.css';\r\n\r\nexport default function FlightList(props) {\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Terminal</th>\r\n          <th>Local Time</th>\r\n          <th>Destination</th>\r\n          <th>Status</th>\r\n          <th>Airline</th>\r\n          <th>Flight</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.flightItems.map(item => { \r\n          return <Flight key={item.ID} flight={item}/>\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nexport default function IconSVG(props) {\r\n  return (\r\n  <span className={props.class}>\r\n    <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 240.277 240.277\" style={{enableBackground: 'new 0 0 240.277 240.277'}} xmlSpace=\"preserve\">\r\n      <g>\r\n        <g>\r\n          <path style={{fill: props.background, stroke: props.background, strokeWidth: 3, strokeMiterlimit: 10}} d=\"M36.87,144.378l8.276,14.63L232.003,51.126\r\n          c0.732-5.004-0.09-10.193-2.755-14.811c-6.565-11.373-21.638-14.962-33.672-8.02l-41.788,26.027l-96.36-31.97L35.367,35.089\r\n          c-2.416,1.393-3.247,4.484-1.849,6.904l72.801,41.883L63.951,110.69l-40.267-2.863l-13.762,7.94\r\n          c-1.819,1.054-2.445,3.384-1.391,5.209L36.87,144.378z\" />\r\n        </g>\r\n      </g>\r\n      <g>\r\n      </g>\r\n      <g>\r\n      </g>\r\n      <g>\r\n      </g>\r\n      <g>\r\n      </g>\r\n      <g>\r\n      </g>\r\n      <g>\r\n      </g>\r\n      <g>\r\n      </g>\r\n      <g>\r\n      </g>\r\n      <g>\r\n      </g>\r\n      <g>\r\n      </g>\r\n      <g>\r\n      </g>\r\n      <g>\r\n      </g>\r\n      <g>\r\n      </g>\r\n      <g>\r\n      </g>\r\n      <g>\r\n      </g>\r\n    </svg>\r\n  </span>\r\n  )\r\n};","import React, {Component} from 'react';\r\nimport './App.css'\r\nimport FlightList from './components/FlightList/FlightList';\r\nimport IconSVG from './components/svgComponents/IconSVG';\r\n\r\n\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      departure: null,\r\n      arrival: null,\r\n      date: null,\r\n      displayTable: 'DEPARTURES',\r\n      selectedDay: null,\r\n      loaded: false\r\n    };\r\n    this.changedDisplayTable = this.changedDisplayTable.bind(this)\r\n  };\r\n  \r\n  getCurrentDate(number, day) {\r\n\r\n\r\n    const currentDate = new Date();\r\n    const currentYear = currentDate.getFullYear();\r\n    const currentMonth = currentDate.getMonth() + 1;\r\n    const currentDay = currentDate.getDate() + number;\r\n  \r\n    this.setState({\r\n      ...this.state,\r\n      date: `${currentDay >= 10 ? currentDay : '0' + currentDay}-${currentMonth >= 10 ? currentMonth : '0' + currentMonth}-${currentYear}`,\r\n      selectedDay: day\r\n    });\r\n  };\r\n\r\n  changedDisplayTable(e) {\r\n    const display = e.target.outerText;\r\n    if (e.target.nodeName === 'LABEL') {\r\n      this.setState( {\r\n        ...this.state,\r\n        displayTable: display\r\n      })\r\n    } else {\r\n        return null;\r\n    }\r\n  };\r\n\r\n  loadApi(url) {\r\n    return fetch(url)\r\n      .then(data => data.json())\r\n      .then(data => data.body)\r\n      .then(({arrival, departure}) => {\r\n        this.setState({\r\n          ...this.state,\r\n          loaded: true,\r\n          arrival: arrival.filter(item => this.filterFlight(this.state.date, item.timeArrExpectCalc)),\r\n          departure: departure.filter(item => this.filterFlight(this.state.date, item.timeDepExpectCalc))\r\n        }); \r\n      });\r\n  };\r\n  \r\n  filterFlight(currDate, flightDate) {\r\n    const currentDay = +currDate.split('-')[0]\r\n    let flightDay = new Date(flightDate).getDate();\r\n    return flightDay === currentDay;\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getCurrentDate(0, 'today');\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.date !== prevState.date) {\r\n      this.loadApi(`https://api.iev.aero/api/flights/${this.state.date}`);\r\n    };\r\n  };\r\n\r\n  getDayAndMonth(num = 0) {\r\n    const date = new Date();\r\n    const day = date.getDate() + num;\r\n    const month = date.getMonth() + 1;\r\n\r\n    return `${day >= 10 ? day : '0' + day}/${month >= 10 ? month : '0' + month}`;\r\n  }\r\n  \r\n\r\n  render() {\r\n    if (this.state.loaded) {\r\n      return (\r\n        <div className=\"flightsPage\">\r\n          <section className=\"changedDisplayTable\">\r\n            <label\r\n\r\n               className={this.state.displayTable === \"DEPARTURES\" ? 'selectedDisplay' : ''} \r\n               onClick={(e) => this.changedDisplayTable(e)}\r\n            > \r\n             <IconSVG class=\"down\" background={this.state.displayTable === \"DEPARTURES\" ? '#1eb7ee' : 'white'}/>\r\n              DEPARTURES   \r\n            </label>\r\n            \r\n            <label\r\n              className={this.state.displayTable === \"ARRIVALS\" ? 'selectedDisplay' : ''}\r\n              onClick={(e) => this.changedDisplayTable(e)}\r\n            >\r\n              <IconSVG class=\"up\" background={this.state.displayTable === \"ARRIVALS\" ? '#1eb7ee' : 'white'}/>\r\n              ARRIVALS\r\n            </label>\r\n          </section>\r\n          <section className=\"buttonChangedDay\">\r\n            <button\r\n              className={this.state.selectedDay === 'yesterday' ? 'selectedDay' : ''}\r\n              onClick={this.getCurrentDate.bind(this, -1, 'yesterday')}>\r\n              <div>{this.getDayAndMonth(-1)}</div>\r\n              Yesterday\r\n            </button>\r\n            <button\r\n             className={this.state.selectedDay === 'today' ? 'selectedDay' : ''}\r\n             onClick={this.getCurrentDate.bind(this, 0, 'today')}>\r\n               <div>{this.getDayAndMonth()}</div>\r\n               Today\r\n             </button>\r\n            <button\r\n              className={this.state.selectedDay === 'tommorow' ? 'selectedDay' : ''}\r\n              onClick={this.getCurrentDate.bind(this, +1, 'tommorow')}> \r\n                <div>{this.getDayAndMonth(1)}</div>\r\n                Tommorow\r\n              </button>\r\n          </section>  \r\n          <FlightList flightItems={this.state.displayTable === 'DEPARTURES' ? this.state.departure : this.state.arrival}/>\r\n        </div>\r\n     );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}