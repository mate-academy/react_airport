{"version":3,"sources":["components/Row.js","components/Table.js","utils.js","components/FlightsTable.js","App.js","serviceWorker.js","index.js"],"names":["Row","_ref","data","react_default","a","createElement","map","cellData","Table","rows","flightData","rowData","Object","keys","forEach","key","push","components_Row","id","MS_IN_DAY","getCurrentDate","dayShiftSize","arguments","length","undefined","today","Date","getTime","day","concat","getDate","month","getMonth","year","getFullYear","normalizeTimeUnit","date","parseTime","dateString","hour","getHours","minutes","getMinutes","parseFlightData","ID","term","airline","status","codeShareData","timeDepExpectCalc","timeToStand","timeDepFact","timeLandFact","expTime","factTime","terminal","time","destination","en","name","flight","codeShare","match","icao","decodeStatus","statusMessage","FlightsTable","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loaded","listOfFlights","departures","currentDate","currentRadio","currentTab","loadData","prevProps","prevState","_this2","setState","requested","dynamicUrl","fetchedData","fetch","then","request","json","body","Promise","resolve","toTab","n","radioValue","_this$state","slice","flightsData","departure","filter","arrival","Fragment","type","onClick","changeTab","bind","value","changeDate","checked","components_Table","React","Component","App","components_FlightsTable","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.68015b15.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Row({ data }) {\n  return (\n    <tr>\n      {data.map(cellData => (<td>{cellData}</td>))}\n    </tr>\n  );\n}\n\nRow.propTypes = {\n  data: PropTypes.arrayOf.isRequired,\n};\n\nexport default Row;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Row from './Row';\n\nfunction Table({ data }) {\n  const rows = data.map((flightData) => {\n    const rowData = [];\n\n    Object.keys(flightData).forEach((key) => {\n      if (flightData[key] && key !== 'id') {\n        rowData.push(flightData[key]);\n      }\n    });\n\n    return (\n      <Row data={rowData} key={flightData.id} />\n    );\n  });\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Terminal</th>\n          <th>Time</th>\n          <th>Destination</th>\n          <th>Airline</th>\n          <th>Flight</th>\n          <th>Status</th>\n        </tr>\n      </thead>\n      <tbody>\n        {rows}\n      </tbody>\n    </table>\n  );\n}\n\nTable.propTypes = {\n  data: PropTypes.arrayOf.isRequired,\n};\n\nexport default Table;\n","const MS_IN_DAY = 86400000;\n\nexport function getCurrentDate(dayShiftSize = 0) {\n  const today = new Date(new Date().getTime() + MS_IN_DAY * dayShiftSize);\n  const day = `${today.getDate()}`;\n  const month = `${today.getMonth() + 1}`;\n  const year = today.getFullYear();\n\n  return `${normalizeTimeUnit(day)}-${normalizeTimeUnit(month)}-${year}`;\n}\n\nfunction normalizeTimeUnit(date) {\n  if (date.length === 1) {\n    return `0${date}`;\n  }\n\n  return date;\n}\n\nexport function doFetch(url) {\n  return fetch(url).then(request => request.json())\n    .then(data => data.body);\n}\n\nexport function parseTime(dateString) {\n  const date = new Date(dateString);\n  const hour = `${date.getHours()}`;\n  const minutes = `${date.getMinutes()}`;\n  const day = `${date.getDate()}`;\n\n  return {\n    day: normalizeTimeUnit(day),\n    hour: normalizeTimeUnit(hour),\n    minutes: normalizeTimeUnit(minutes),\n  };\n}\n\nexport function parseFlightData(flightData) {\n  const {\n    ID,\n    term,\n    airline,\n    status,\n    codeShareData,\n    timeDepExpectCalc,\n    timeToStand,\n    timeDepFact,\n    timeLandFact,\n  } = flightData;\n  const expTime = parseTime(timeDepExpectCalc || timeToStand);\n  const factTime = parseTime(timeDepFact || timeLandFact);\n\n  return {\n    terminal: term,\n    time: `${expTime.hour}:${expTime.minutes}`,\n    destination: flightData['airportToID.city_en']\n      || flightData['airportFromID.city_en'],\n    airline: airline.en.name,\n    flight: codeShareData[0].codeShare[0].match(/[A-Z]/)\n      ? codeShareData[0].codeShare\n      : codeShareData[0].icao + codeShareData[0].codeShare,\n    status: decodeStatus(status, `${factTime.hour}:${factTime.minutes}`),\n    id: ID,\n  };\n}\n\nfunction decodeStatus(statusMessage, time) {\n  switch (statusMessage) {\n    case 'CX': return 'Cancelled';\n    case 'LN': return `Landed ${time}`;\n    case 'GC': return 'Gate closed';\n    case 'DP': return `Departed at ${time}`;\n    case 'CK': return 'Check-in';\n    case 'FR': return 'In flight';\n    default: return 'On time';\n  }\n}\n","import React from 'react';\nimport Table from './Table';\nimport {\n  doFetch, getCurrentDate, parseFlightData, parseTime,\n} from '../utils';\n\nclass FlightsTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      listOfFlights: [],\n      departures: true,\n      currentDate: getCurrentDate(),\n      currentRadio: 'today',\n      currentTab: 'departures',\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currentDate } = this.state;\n\n    if (currentDate !== prevState.currentDate) {\n      this.loadData();\n    }\n  }\n\n  loadData() {\n    this.setState(prevState => ({\n      loaded: false,\n      requested: true,\n    }));\n\n    const { currentDate } = this.state;\n    const dynamicUrl = `https://api.iev.aero/api/flights/${currentDate}`;\n    const fetchedData = doFetch(dynamicUrl);\n\n    Promise.resolve(fetchedData)\n      .then(\n        (data) => {\n          this.setState(prevState => ({\n            loaded: true,\n            listOfFlights: data,\n            requested: false,\n          }));\n        }\n      );\n  }\n\n  changeTab(toTab) {\n    const { currentTab } = this.state;\n\n    if (currentTab !== toTab) {\n      this.setState(prevState => ({\n        departures: !prevState.departures,\n        currentTab: toTab,\n      }));\n    }\n  }\n\n  changeDate(n, radioValue) {\n    const { currentRadio } = this.state;\n\n    if (currentRadio !== radioValue) {\n      this.setState(prevState => ({\n        currentDate: getCurrentDate(n),\n        currentRadio: radioValue,\n      }));\n    }\n  }\n\n  render() {\n    const {\n      departures,\n      listOfFlights,\n      loaded,\n      currentDate,\n      currentRadio,\n      requested,\n    } = this.state;\n\n    if (requested) {\n      return <div>Loading data...</div>;\n    }\n\n    if (loaded) {\n      const date = currentDate.slice(0, 2);\n      const flightsData = departures\n        ? listOfFlights.departure\n          .filter(data => parseTime(data.timeDepExpectCalc).day === date)\n          .map(parseFlightData)\n        : listOfFlights.arrival\n          .filter(data => parseTime(data.timeToStand).day === date)\n          .map(parseFlightData);\n\n      return (\n        <>\n          <button\n            type=\"button\"\n            onClick={this.changeTab.bind(this, 'departures')}\n          >\n            Departures\n          </button>\n          <button\n            type=\"button\"\n            onClick={this.changeTab.bind(this, 'arrivals')}\n          >\n            Arrivals\n          </button>\n\n          <div>\n            <label>\n              <input\n                type=\"radio\"\n                name=\"date\"\n                value=\"yesterday\"\n                onClick={this.changeDate.bind(this, -1, 'yesterday')}\n                checked={currentRadio === 'yesterday'}\n              />\n              Yesterday\n            </label>\n\n            <label>\n              <input\n                type=\"radio\"\n                name=\"date\"\n                value=\"today\"\n                onClick={this.changeDate.bind(this, 0, 'today')}\n                checked={currentRadio === 'today'}\n              />\n              Today\n            </label>\n\n            <label>\n              <input\n                type=\"radio\"\n                name=\"date\"\n                value=\"tomorrow\"\n                onClick={this.changeDate.bind(this, 1, 'tomorrow')}\n                checked={currentRadio === 'tomorrow'}\n              />\n              Tomorrow\n            </label>\n          </div>\n\n          <Table data={flightsData} />\n        </>\n      );\n    }\n\n    return <div>Something went wrong</div>;\n  }\n}\n\nexport default FlightsTable;\n","import React from 'react';\nimport './App.css';\nimport FlightsTable from './components/FlightsTable';\n\nfunction App() {\n  return (\n    <FlightsTable />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}